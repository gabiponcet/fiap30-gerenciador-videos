name: CI/CD Pipeline - Gerenciador de V√≠deos Application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set permissions for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Verify Gradle Wrapper Version
        run: ./gradlew wrapper --version

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: List build/libs contents
        run: ls -la build/libs

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/gerenciador-videos:latest .

      - name: Send Discord Notification - Build Success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"‚úÖ GERENCIADOR DE V√çDEOS üé•: Build conclu√≠do com sucesso!üõ†Ô∏è"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification - Build Failure
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"‚ö†Ô∏è GERENCIADOR DE V√çDEOS üé•: Build falhou üö´! Verifique os logs para mais detalhes."}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set permissions for Gradle Wrapper
        run: chmod +x ./gradlew

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run Unit Tests and Generate JaCoCo Report
        run: ./gradlew test jacocoTestReport

      - name: Upload JaCoCo Report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/

      - name: Check Quality Gate
        run: ./gradlew check
        continue-on-error: true

      - name: Send Discord Notification - Test Success
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"‚úÖ GERENCIADOR DE V√çDEOS üé•: Testes conclu√≠dos com sucesso!üìí‚úèÔ∏è"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Notification - Test Failure
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"‚ö†Ô∏è GERENCIADOR DE V√çDEOS üé•: Testes falharam! Verifique os logs para mais detalhes. üö´"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/gerenciador-videos:latest

      - name: Scan Docker image for vulnerabilities
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/gerenciador-videos:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/gerenciador-videos:latest

      - name: Send Discord Success Notification - Deploy
        if: success()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"‚úÖ GERENCIADOR DE V√çDEOS üé•: Deploy conclu√≠do com sucesso!üöÄ"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Discord Failure Notification - Deploy
        if: failure()
        run: |
          curl -X POST \
            -H 'Content-type: application/json' \
            --data '{"content":"‚ö†Ô∏è GERENCIADOR DE V√çDEOS üé•: Deploy falhou! Verifique os logs para mais detalhes.üö´"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}