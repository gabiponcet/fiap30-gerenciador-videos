plugins {
    id 'java-conventions'
    id 'jacoco-report-aggregation'
    id 'application'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '8.5.10'
}

group = 'com.fiap.tech.challenge.infrastructure'

dependencies {
    implementation project(':domain')
    implementation project(':application')
    implementation 'software.amazon.awssdk:s3'
    implementation'org.springdoc:springdoc-openapi-webmvc-core:1.6.14'
    implementation'org.springdoc:springdoc-openapi-ui:1.6.14'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'com.google.cloud:google-cloud-storage:2.17.1'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.flywaydb:flyway-core'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    testRuntimeOnly('com.h2database:h2')
}


testCodeCoverageReport {
    reports {
        xml {
            enabled true
            destination file("$rootDir/build/reports/jacoco/test/jacocoTestReport.xml")
        }
        html {
            enabled true
            destination file("$rootDir/build/reports/jacoco/test/")
        }
    }
}

flyway {
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:postgresql://localhost:5432/videos'
    user = System.getenv('FLYWAY_USER') ?: 'postgres'
    password = System.getenv('FLYWAY_PASS') ?: 'postgres'
}

bootJar {
    archiveFileName = 'application.jar'
    destinationDirectory.set(file("${rootProject.buildDir}/libs"))
}

test {
    useJUnitPlatform()
}